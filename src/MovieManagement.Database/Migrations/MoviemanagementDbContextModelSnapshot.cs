// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieManagement.Database;

#nullable disable

namespace MovieManagement.Domain.Migrations
{
    [DbContext(typeof(MoviemanagementDbContext))]
    partial class MoviemanagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MovieManagement.Database.Entities.MovieEntity", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("title");

                    b.HasKey("MovieId");

                    b.ToTable("Movie", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.MovieListEntity", b =>
                {
                    b.Property<Guid>("MovielistId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("movielist_id");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("MovielistId");

                    b.HasIndex("UserId");

                    b.ToTable("MovieList", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.MovieListMovie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<Guid>("MovielistId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("movielist_id");

                    b.HasIndex("MovieId");

                    b.HasIndex("MovielistId");

                    b.ToTable("MovieList_Movie", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.MovieRating", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("movie_id");

                    b.Property<Guid>("RatingId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rating_id");

                    b.HasIndex("MovieId");

                    b.HasIndex("RatingId");

                    b.ToTable("Movie_Rating", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.RatingEntity", b =>
                {
                    b.Property<Guid>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rating_id");

                    b.Property<byte[]>("Datetime")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<decimal?>("Rating")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("rating");

                    b.Property<string>("Review")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("review");

                    b.Property<Guid>("UserId")
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("RatingId");

                    b.HasIndex("UserId");

                    b.ToTable("Rating", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("username");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.MovieListEntity", b =>
                {
                    b.HasOne("MovieManagement.Database.Entities.UserEntity", "UserEntity")
                        .WithMany("MovieLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_user_id_movielist");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.MovieListMovie", b =>
                {
                    b.HasOne("MovieManagement.Database.Entities.MovieEntity", "MovieEntity")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_movie_id_movielist");

                    b.HasOne("MovieManagement.Database.Entities.MovieListEntity", "Movielist")
                        .WithMany()
                        .HasForeignKey("MovielistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_movielist_id_movie");

                    b.Navigation("MovieEntity");

                    b.Navigation("Movielist");
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.MovieRating", b =>
                {
                    b.HasOne("MovieManagement.Database.Entities.MovieEntity", "MovieEntity")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_movie_id_rating");

                    b.HasOne("MovieManagement.Database.Entities.RatingEntity", "RatingEntity")
                        .WithMany()
                        .HasForeignKey("RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_rating_id_movie");

                    b.Navigation("MovieEntity");

                    b.Navigation("RatingEntity");
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.RatingEntity", b =>
                {
                    b.HasOne("MovieManagement.Database.Entities.UserEntity", "UserEntity")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_user_id");

                    b.Navigation("UserEntity");
                });

            modelBuilder.Entity("MovieManagement.Database.Entities.UserEntity", b =>
                {
                    b.Navigation("MovieLists");

                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
